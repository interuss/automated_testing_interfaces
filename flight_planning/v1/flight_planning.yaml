openapi: 3.0.2
info:
  title: Flight Planning Automated Testing Interface
  version: 0.1.0
  description: >-
    This interface is implemented by a USS wishing to participate in automated tests involving attempts to plan flights.
    
    The client (usually uss_qualifier) pretends to be a user interacting with the USS's flight planning user interface
    attempting to plan, update, and close flight plans.
    
    The client may also (with a separate authorization scope) act as the test director to determine the status of the
    USS's system under test, and request that the test area be cleared of any dangling flight plans.
    
    Note: Unless otherwise specified, fields specified in a message but not declared in the API or otherwise known to
    the server or client (as applicable) must be ignored.

components:
  securitySchemes:
    Authority:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: https://auth.example.com/oauth/token
          scopes:
            interuss.flight_planning.direct_automated_test: |-
              Client may determine the test-readiness of the USS and instruct the USS to perform various actions to
              prepare for tests involving flight planning (acting as test director).
            interuss.flight_planning.plan: |-
              Client may act as a user attempting to plan a flight, modify an existing flight plan, or close an existing
              flight plan.
      description: |-
        Authorization from, or on behalf of, an authorization authority, augmenting standard strategic conflict detection or other similar authorization for the purpose of automated testing.

  schemas:
    StatusResponse:
      type: object
      required:
        - status
      properties:
        status:
          description: >-
            The status of the USS automated testing interface.

            - `Starting`: the USS is starting and the automated test driver should wait before sending requests.

            - `Ready`: the USS is ready to receive test requests.
          type: string
          enum: [Starting, Ready]
          example: Ready
        system_version:
          description: |-
            Arbitrary string representing the version of the USS system to be tested.
          type: string
          example: v0.0.1-445ad3
        api_name:
          description: |-
            Indication of the API implemented at this URL.  Must be "Flight Planning Automated Testing Interface".
          type: string
          example: Flight Planning Automated Testing Interface
        api_version:
          description: |-
            Indication of the API version implemented at this URL.  Must be "v0.1.0" when implementing this version of the API.
          type: string
          example: v0.1.0

    FlightPlan:
      description: >-
        Details of user's intent to create or modify a flight plan.
      required:
        - basic_information
      type: object
      properties:
        basic_information:
          $ref: '#/components/schemas/BasicFlightPlanInformation'
        astm_f3548_21:
          $ref: './scd.yaml#/components/schemas/ASTMF354821OpIntentInformation'
        uspace_flight_authorisation:
          $ref: './uspace.yaml#/components/schemas/FlightAuthorisationData'
        rpas_operating_rules_2_6:
          $ref: './au.yaml#/components/schemas/RPAS26FlightDetails'
        additional_information:
          description: >-
            Any information relevant to a particular jurisdiction or use case not described in the standard schema. The
            keys and values must be agreed upon between the test designers and USSs under test.
          type: object

    BasicFlightPlanInformation:
      description: >-
        Basic information about a flight plan that an operator and/or UAS can be expected to provide in most flight
        planning scenarios.
      type: object
      required:
        - usage_state
        - uas_state
      properties:
        usage_state:
          description: >-
            User's current usage of the flight plan.
            
            `Planned`: The user intends to fly according to this flight plan, but is not currently using the defined
              area with an active UAS.
            
            `InUse`: The user is currently using the defined area with an active UAS.
          type: string
          enum:
            - Planned
            - InUse
        uas_state:
          description: >-
            State of the user's UAS associated with this flight plan.
            
              - `Nominal`: The user or UAS reports or implies that it is performing nominally.
            
              - `OffNominal`: The user or UAS reports or implies that it is temporarily not performing nominally, but
                expects to be able to recover to normal operation.
            
              - `Contingent`: The user or UAS reports or implies that it is not performing nominally and may be unable
                to recover to normal operation.
          type: string
          enum:
            - Nominal
            - OffNominal
            - Contingent
        nominal_area:
          description: >-
            User nominally intends or intended to fly in this entire area.  If authorizations are required and cannot be
            granted to cover this entire area, the plan should be rejected.
          type: array
          items:
            $ref: './astm_f3548_21.yaml#/components/schemas/Volume4D'
          default: []
        off_nominal_area:
          description: >-
            While experiencing an off-nominal situation, the user's aircraft may travel anywhere in this area.  If the
            flight_state is nominal, this field must be empty or omitted.
          type: array
          items:
            $ref: './astm_f3548_21.yaml#/components/schemas/Volume4D'
          default: []

    UpsertFlightPlanRequest:
      type: object
      required:
        - intended_flight
        - request_id
      properties:
        intended_flight:
          $ref: '#/components/schemas/FlightPlan'
        request_id:
          description: >-
            ID uniquely identifying the upsertion request.  If additional requests are received with the same
            request_id, the response from the first request should be returned, or an error indicated.
          anyOf:
            - $ref: './astm_f3548_21.yaml#/components/schemas/UUIDv4Format'

    UpsertFlightPlanResponse:
      type: object
      required:
        - result
      properties:
        result:
          description: >-
            The result of the flight plan submission.
            If any option other than `Planned` or `ReadyToFly` is specified, the `notes` field should be populated with the reason for the unsuccessful outcome.

              - `Planned`: The data submitted in the flight plan intent was valid and the flight plan was successfully processed by the USS and is now authorized, but the user may not yet start flying (even if within the time bounds of the flight plan).

              - `ReadyToFly`: The flight plan is ready for the operator to begin flying within the bounds (including time) of the flight plan.

              - `Rejected`: The data provided in the flight plan was invalid and/or could not be used to successfully authorize the flight.  The reason for rejection may include a disallowed conflict with another flight.

              - `Failed`: The USS was not able to successfully authorize the flight plan due to a problem with the USS or a downstream system
            
              - `NotSupported`: The USS does not support the attempted interaction.  For instance, if the request specified a high-priority flight and the USS does not support management of high-priority flights.
          type: string
          enum: [Planned, ReadyToFly, Rejected, Failed, NotSupported]
          example: Planned
        notes:
          description: >-
            Human-readable explanation of the observed result.  This explanation
            may be made available to a human reviewing the test results, and
            ideally should explain why an undesirable result was obtained.  For
            instance, if the injection attempt Failed, then these notes may
            indicate that the attempt failed because the DSS indicated 400 to a
            valid request (perhaps also including the valid request as proof).
          type: string
          example: Requested flight intersected operational intent c036326c-c97b-4926-bf9f-c60dc83d2b57
        includes_advisories:
          description: >-
            Indication of whether any advisories or conditions were provided to the user along with the result of this
            flight planning attempt.
            
              - `Unknown`: It is unknown or irrelevant whether advisories or conditions were provided to the user

              - `Yes`: At least one advisory or condition was provided to the user.
            
              - `No`: No advisories or conditions were provided to the user.
          type: string
          enum:
            - Unknown
            - Yes
            - No
          default: Unknown
          example: No

    DeleteFlightPlanResponse:
      type: object
      required:
        - result
      properties:
        result:
          description: >-
            The result of attempted flight plan cancellation/closure.

              - `Closed`: The flight plan was closed successfully by the USS and is now out of the UTM system.

              - `Failed`: The flight plan could not be closed successfully by the USS.
          enum: [Closed, Failed]
          example: Failed
        notes:
          description: >-
            Human-readable explanation of the observed result.
          type: string
          example: DSS was unreachable when attempting to delete operational intent reference

    ClearAreaRequest:
      type: object
      required:
        - request_id
        - extent
      properties:
        request_id:
          description: >-
            Unique string identifying this request.  If a second request with an
            identical ID is received, the USS may return the same response from
            the previous operation rather than attempting to clear the area
            again (the USS may also attempt to clear the area again).
          type: string
        extent:
          description: >-
            The USS should cancel and remove any flight plan where any part of that
            flight plan intersects this area.
          anyOf:
            - $ref: './astm_f3548_21.yaml#/components/schemas/Volume4D'
    ClearAreaOutcome:
      type: object
      properties:
        success:
          description: >-
            True if, and only if, all flight plans in the specified area managed by the
            USS were canceled and removed.
          type: boolean
          default: false
        message:
          description: >-
            If the USS was unable to clear the entire area, this message can
            provide information on the problem encountered.
          type: string
          example: >-
            DSS at dss.example.com returned 500 when attempting to delete
            operational intent 57e98b17-aefa-4eee-a376-5140e4a8385f
    ClearAreaResponse:
      type: object
      required:
        - outcome
      properties:
        outcome:
          $ref: '#/components/schemas/ClearAreaOutcome'

paths:
  /status:
    get:
      security:
        - Authority:
            - interuss.flight_planning.direct_automated_test
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
          description: >-
            The USS automated testing interface is available and its status was retrieved successfully.
        '401':
          description: Bearer access token was not provided in Authorization header, token could not be decoded, or token was invalid.
        '403':
          description: The access token was decoded successfully but did not include a scope appropriate to this endpoint.
        '404':
          description: The USS automated testing interface is not available.
      summary: Status of the USS automated testing interface
      description: Get the status of the USS automated testing interface.

  /clear_area_requests:
    post:
      security:
        - Authority:
            - interuss.flight_planning.direct_automated_test

      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClearAreaRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClearAreaResponse'
          description: Requested area was cleared successfully
        '401':
          description: Bearer access token was not provided in Authorization header, token could not be decoded, or token was invalid.
        '403':
          description: The access token was decoded successfully but did not include a scope appropriate to this endpoint.

      summary: Clear area
      operationId: ClearArea
      description: >-
        This endpoint requests that the USS cancel and remove all flight plans in the specified area.

  /flight_plans/{flight_plan_id}:
    parameters:
      - name: flight_plan_id
        in: path
        required: true
        description: A UUID string identifying the user's flight plan intent.
        schema:
          $ref: './astm_f3548_21.yaml#/components/schemas/UUIDv4Format'

    put:
      security:
        - Authority:
            - interuss.flight_planning.plan

      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpsertFlightPlanRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpsertFlightPlanResponse'
          description: Requested data was processed successfully
        '401':
          description: Bearer access token was not provided in Authorization header, token could not be decoded, or token was invalid.
        '403':
          description: The access token was decoded successfully but did not include a scope appropriate to this endpoint.
        '409':
          description: The request contains a duplicate request_id and the response for that request is not available, or another conflict condition occurred.

      summary: Upsert flight plan
      operationId: UpsertFlightPlan
      description: >-
        This endpoint simulates an operator intention to submit a new or updated flight plan.

    delete:
      security:
        - Authority:
            - interuss.flight_planning.plan

      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteFlightPlanResponse'
          description: Flight plan was closed successfully
        '401':
          description: Bearer access token was not provided in Authorization header, token could not be decoded, or token was invalid.
        '403':
          description: The access token was decoded successfully but did not include a scope appropriate to this endpoint.
        '404':
          description: The specified flight plan could not be found (it may have already been deleted).

      summary: Close flight plan
      operationId: DeleteFlightPlan
      description: >-
        This endpoint simulates the operator intention to cancel, end, or close a flight plan.
